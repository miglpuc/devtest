// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Database;

namespace backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("backend.Models.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<int>("Points");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("backend.Models.Entities.DriverVehicle", b =>
                {
                    b.Property<int>("DriverId");

                    b.Property<int>("VehicleId");

                    b.HasKey("DriverId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverVehicle");
                });

            modelBuilder.Entity("backend.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Model");

                    b.Property<string>("Plate");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("backend.Models.Entities.Violation", b =>
                {
                    b.Property<int>("ViolationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("DriverId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("ViolationTypeId");

                    b.HasKey("ViolationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("ViolationTypeId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("backend.Models.Entities.ViolationType", b =>
                {
                    b.Property<int>("ViolationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("Points");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("ViolationTypeId");

                    b.ToTable("ViolationsType");
                });

            modelBuilder.Entity("backend.Models.Entities.DriverVehicle", b =>
                {
                    b.HasOne("backend.Models.Entities.Driver", "Driver")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Entities.Violation", b =>
                {
                    b.HasOne("backend.Models.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("backend.Models.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.HasOne("backend.Models.Entities.ViolationType", "ViolationType")
                        .WithMany()
                        .HasForeignKey("ViolationTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
